from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
import asyncio

from app.memes.zucchini.zucchini_handlers import router as zucchini_router
from app.memes.cringe.cringe_handlers import router as cringe_router
from app.memes.cat.cat_handlers import router as cat_router
from app.psy.addiction.addiction_handlers import router as addiction_router
from app.psy.confidence.confidence_handlers import router as confidence_router
from app.psy.eq.eq_handlers import router as eq_router
from app.random.gk.gk_handlers import router as gk_router
from app.random.amir.amir_handlers import router as amir_router
router = Router()
router.include_router(amir_router)
router.include_router(gk_router)
router.include_router(eq_router)
router.include_router(confidence_router)
router.include_router(addiction_router)
router.include_router(zucchini_router)
router.include_router(cringe_router)
router.include_router(cat_router)
@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} !\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –≤—ã!',
        reply_markup=kb.main
    )

@router.message(F.text == '–í—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç—ã')
async def test_select(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤:", reply_markup=kb.choose_test)

@router.callback_query(lambda c: c.data in ['psy_test', 'meme_test', 'random_test'])
async def show_test_category(callback: types.CallbackQuery):
    if callback.data == 'psy_test':
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏:", reply_markup=kb.psy_test_keyboard)
    elif callback.data == 'meme_test':
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–º–Ω—ã–π —Ç–µ—Å—Ç:", reply_markup=kb.meme_test_keyboard)
    elif callback.data == 'random_test':
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç–µ—Å—Ç:", reply_markup=kb.random_test_keyboard)
    await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º...")

@router.callback_query(lambda c: c.data == 'back_to_main')
async def back_to_main_hadler(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤:", reply_markup=kb.choose_test)
    await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º...")

@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–Ω—ã–µ —Ç–µ—Å—Ç—ã: –æ—Ç ¬´–ö–∞–∫–æ–π —Ç—ã –∫–∞–±–∞—á–æ–∫?¬ª –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–≤–æ–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –í—ã–±–∏—Ä–∞–π, –ø—Ä–æ—Ö–æ–¥–∏ –∏ —É–∑–Ω–∞–≤–∞–π –æ —Å–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!–ö—Å—Ç–∞—Ç–∏, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª ‚Äî —Ç–∞–º —Ç–æ–∂–µ –∫—É—á–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.", reply_markup=kb.contacts)

@router.message(F.text == '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Å—Ç—ã')
async def offer_test(message: Message):
    await message.answer("–ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ—Å—Ç—ã, —É—á—Ç–∏—Ç–µ –¥–≤–∞ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª–∞: \n\n–ù–∏–∫–∞–∫–æ–≥–æ –Ω–µ–ª–µ–≥–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ—Å—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏–µ–π, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º–∏, —É–±–∏–π—Å—Ç–≤–∞–º–∏ –∏ –ø—Ä–æ—á–∏–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.\n\n–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n–í–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤.\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.\n–ò—Å—Ç–æ—á–Ω–∏–∫ (–æ—Ç–∫—É–¥–∞ –≤—ã –≤–∑—è–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é).\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üòä", reply_markup=kb.contacts)